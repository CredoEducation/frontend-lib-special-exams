{"version":3,"sources":["../../src/data/thunks.js"],"names":["handleAPIError","error","dispatch","message","detail","errorMsg","EXAM_START_TIMEOUT_MILLISECONDS","updateAttemptAfter","courseId","sequenceId","promiseToBeResolvedFirst","noLoading","isLoading","response","exam_attempt_id","attemptData","exam","activeAttempt","active_attempt","getExamAttemptsData","getProctoringSettings","getState","examState","id","proctoringSettings","startTimedExam","course_id","content_id","createProctoredExamAttempt","startProctoredExam","attempt","workerUrl","desktop_application_js_url","useWorker","window","Worker","startExamTimeoutMilliseconds","actionToMessageTypesMap","start","then","attempt_id","catch","attemptId","attemptStatus","attempt_status","examId","skipProctoringExam","pollAttempt","url","currentAttempt","ExamStatus","READY_TO_SUBMIT","data","updatedAttempt","time_remaining_seconds","accessibility_time_string","status","SUBMITTED","stopExam","examUrl","exam_url_path","location","href","res","result","confirm","unanswered_count","problems_count","continueExam","resetExam","submitExam","handleBackendProviderSubmission","submit","expireExam","pingAttempt","timeoutInSeconds","startProctoringSoftwareDownload","getExamReviewPolicy","policy","review_policy","getAllowProctoringOptOut","allowProctoringOptOut"],"mappings":"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","sourcesContent":["import { logError } from '@edx/frontend-platform/logging';\nimport {\n  fetchExamAttemptsData,\n  createExamAttempt,\n  stopAttempt,\n  continueAttempt,\n  submitAttempt,\n  pollExamAttempt,\n  fetchProctoringSettings,\n  softwareDownloadAttempt,\n  fetchExamReviewPolicy,\n  resetAttempt,\n  declineAttempt,\n  endExamWithFailure,\n  updateAttemptStatus,\n} from './api';\nimport { isEmpty } from '../helpers';\nimport {\n  setIsLoading,\n  setExamState,\n  expireExamAttempt,\n  setActiveAttempt,\n  setProctoringSettings,\n  setReviewPolicy,\n  setApiError,\n  setAllowProctoringOptOut,\n} from './slice';\nimport { ExamStatus } from '../constants';\nimport { workerPromiseForEventNames, pingApplication } from './messages/handlers';\nimport actionToMessageTypesMap from './messages/constants';\n\nfunction handleAPIError(error, dispatch) {\n  const { message, detail } = error;\n  dispatch(setApiError({ errorMsg: message || detail }));\n}\n\nconst EXAM_START_TIMEOUT_MILLISECONDS = 5000;\n\n/**\n * Fetch attempt data and update exam state after performing another action if it is provided.\n * It is assumed that action somehow modifies attempt in the backend, that's why the state needs\n * to be updated.\n * @param courseId - id of a course\n * @param sequenceId - id of a sequence\n * @param promiseToBeResolvedFirst - a promise that should get resolved before fetching attempt data\n * @param noLoading - if set to false shows spinner while executing the function\n */\nfunction updateAttemptAfter(courseId, sequenceId, promiseToBeResolvedFirst = null, noLoading = false) {\n  return async (dispatch) => {\n    if (!noLoading) { dispatch(setIsLoading({ isLoading: true })); }\n    if (promiseToBeResolvedFirst) {\n      try {\n        const response = await promiseToBeResolvedFirst;\n        if (!response || !response.exam_attempt_id) {\n          if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n          return;\n        }\n      } catch (error) {\n        handleAPIError(error, dispatch);\n        if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n      }\n    }\n\n    try {\n      const attemptData = await fetchExamAttemptsData(courseId, sequenceId);\n      dispatch(setExamState({\n        exam: attemptData.exam,\n        activeAttempt: !isEmpty(attemptData.active_attempt) ? attemptData.active_attempt : null,\n      }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    } finally {\n      if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n    }\n  };\n}\n\nexport function getExamAttemptsData(courseId, sequenceId) {\n  return updateAttemptAfter(courseId, sequenceId);\n}\n\nexport function getProctoringSettings() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to get exam settings. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch proctoring settings. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const proctoringSettings = await fetchProctoringSettings(exam.id);\n      dispatch(setProctoringSettings({ proctoringSettings }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\n/**\n * Start a timed exam\n */\nexport function startTimedExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to start exam. No exam id.');\n      handleAPIError(\n        { message: 'Failed to start exam. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, createExamAttempt(exam.id),\n    )(dispatch);\n  };\n}\n\nexport function createProctoredExamAttempt() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to create exam attempt. No exam id.');\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, createExamAttempt(exam.id, false, true),\n    )(dispatch);\n  };\n}\n\n/**\n * Start a proctored exam (including onboarding and practice exams)\n */\nexport function startProctoredExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const { attempt } = exam || {};\n    if (!exam.id) {\n      logError('Failed to start proctored exam. No exam id.');\n      return;\n    }\n    const { desktop_application_js_url: workerUrl } = attempt || {};\n    const useWorker = window.Worker && workerUrl;\n\n    if (useWorker) {\n      const startExamTimeoutMilliseconds = EXAM_START_TIMEOUT_MILLISECONDS;\n      workerPromiseForEventNames(actionToMessageTypesMap.start, exam.attempt.desktop_application_js_url)(\n        startExamTimeoutMilliseconds,\n      ).then(() => updateAttemptAfter(\n        exam.course_id, exam.content_id, continueAttempt(attempt.attempt_id),\n      )(dispatch))\n        .catch(error => {\n          const message = error?.message || 'Worker failed to respond.';\n          logError(\n            message,\n            {\n              attemptId: attempt.attempt_id,\n              attemptStatus: attempt.attempt_status,\n              courseId: attempt.course_id,\n              examId: exam.id,\n            },\n          );\n          handleAPIError(\n            { message: 'Something has gone wrong starting your exam. Please double-check that the application is running.' },\n            dispatch,\n          );\n        });\n    } else {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, continueAttempt(attempt.attempt_id),\n      )(dispatch);\n    }\n  };\n}\n\nexport function skipProctoringExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to skip proctored exam. No exam id.');\n      return;\n    }\n    const attemptId = exam.attempt.attempt_id;\n    if (attemptId) {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, declineAttempt(attemptId),\n      )(dispatch);\n    } else {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, createExamAttempt(exam.id, true, false),\n      )(dispatch);\n    }\n  };\n}\n\n/**\n * Poll exam active attempt status.\n * @param url - poll attempt url\n */\nexport function pollAttempt(url) {\n  return async (dispatch, getState) => {\n    const currentAttempt = getState().examState.activeAttempt;\n\n    // If the learner is in a state where they've finished the exam\n    // and the attempt can be submitted (i.e. they are \"ready_to_submit\"),\n    // don't ping the proctoring app (which action could move\n    // the attempt into an error state).\n    if (currentAttempt && currentAttempt.attempt_status === ExamStatus.READY_TO_SUBMIT) {\n      return;\n    }\n\n    try {\n      const data = await pollExamAttempt(url);\n      const updatedAttempt = {\n        ...currentAttempt,\n        time_remaining_seconds: data.time_remaining_seconds,\n        accessibility_time_string: data.accessibility_time_string,\n        attempt_status: data.status,\n      };\n      dispatch(setActiveAttempt({\n        activeAttempt: updatedAttempt,\n      }));\n      if (data.status === ExamStatus.SUBMITTED) {\n        dispatch(expireExamAttempt());\n      }\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function stopExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n\n    if (!activeAttempt) {\n      logError('Failed to stop exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to stop exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const { attempt_id: attemptId, exam_url_path: examUrl } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await stopAttempt(attemptId);\n        window.location.href = examUrl;\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    const res = await updateAttemptStatus(attemptId, 'check_questions_completed');\n    if (res.result) {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, stopAttempt(attemptId),\n      )(dispatch);\n    } else if (window.confirm(`You have not completed ${res.unanswered_count} of ${res.problems_count} questions in the exam. Are you sure you want to end your exam?`)) {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, stopAttempt(attemptId),\n      )(dispatch);\n    }\n  };\n}\n\nexport function continueExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const attemptId = exam.attempt.attempt_id;\n    if (!attemptId) {\n      logError('Failed to continue exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to continue exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, continueAttempt(attemptId),\n    )(dispatch);\n  };\n}\n\nexport function resetExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const attemptId = exam.attempt.attempt_id;\n    if (!attemptId) {\n      logError('Failed to reset exam attempt. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to reset exam attempt. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, resetAttempt(attemptId),\n    )(dispatch);\n  };\n}\n\nexport function submitExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n    const { desktop_application_js_url: workerUrl } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    const handleBackendProviderSubmission = () => {\n      // if a backend provider is being used during the exam\n      // send it a message that exam is being submitted\n      if (useWorker) {\n        workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)()\n          .catch(() => handleAPIError(\n            { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n            dispatch,\n          ));\n      }\n    };\n\n    if (!activeAttempt) {\n      logError('Failed to submit exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to submit exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const { attempt_id: attemptId, exam_url_path: examUrl } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await submitAttempt(attemptId);\n        window.location.href = examUrl;\n        handleBackendProviderSubmission();\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    await updateAttemptAfter(exam.course_id, exam.content_id, submitAttempt(attemptId))(dispatch);\n    handleBackendProviderSubmission();\n  };\n}\n\nexport function expireExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n    const { desktop_application_js_url: workerUrl, attempt_id: attemptId } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    if (!attemptId) {\n      logError('Failed to expire exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to expire exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    await updateAttemptAfter(\n      activeAttempt.course_id, exam.content_id, submitAttempt(attemptId),\n    )(dispatch);\n    dispatch(expireExamAttempt());\n\n    if (useWorker) {\n      workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)()\n        .catch(() => handleAPIError(\n          { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n          dispatch,\n        ));\n    }\n  };\n}\n\n/**\n * Ping provider application (used for proctored exams).\n * @param timeoutInSeconds - time to wait for worker response before raising an error\n * @param workerUrl - location of the worker from the provider\n */\nexport function pingAttempt(timeoutInSeconds, workerUrl) {\n  return async (dispatch, getState) => {\n    await pingApplication(timeoutInSeconds, workerUrl)\n      .catch(async (error) => {\n        const { exam, activeAttempt } = getState().examState;\n        const message = error?.message || 'Worker failed to respond.';\n        /**\n         * Note: The exam id logged here represents the current section being rendered.\n         * This may be different from the exam they are currently attempting\n         * if the learner has navigated to other course content during the exam.\n         * */\n        logError(\n          message,\n          {\n            attemptId: activeAttempt.attempt_id,\n            attemptStatus: activeAttempt.attempt_status,\n            courseId: activeAttempt.course_id,\n            examId: exam.id,\n          },\n        );\n        await updateAttemptAfter(\n          exam.course_id, exam.content_id, endExamWithFailure(activeAttempt.attempt_id, message),\n        )(dispatch);\n      });\n  };\n}\n\nexport function startProctoringSoftwareDownload() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const attemptId = exam.attempt.attempt_id;\n    if (!attemptId) {\n      logError('Failed to start downloading proctoring software. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to start downloading proctoring software. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, softwareDownloadAttempt(attemptId),\n    )(dispatch);\n  };\n}\n\nexport function getExamReviewPolicy() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to fetch exam review policy. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch exam review policy. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const data = await fetchExamReviewPolicy(exam.id);\n      dispatch(setReviewPolicy({ policy: data.review_policy }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function getAllowProctoringOptOut(allowProctoringOptOut) {\n  return (dispatch) => {\n    dispatch(setAllowProctoringOptOut({ allowProctoringOptOut }));\n  };\n}\n"],"file":"thunks.js"}