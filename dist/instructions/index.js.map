{"version":3,"sources":["../../src/instructions/index.jsx"],"names":["Instructions","children","state","ExamStateContext","exam","attempt","examType","type","prerequisitesData","prerequisite_status","passedDueDate","passed_due_date","hideAfterDue","hide_after_due","prerequisitesPassed","are_prerequisites_satisifed","attemptStatus","attempt_status","attemptReadyToResume","attempt_ready_to_resume","skipProctoring","toggleSkipProctoring","toggleSkipProctoredExam","expired","renderEmptyAttemptInstructions","component","ExamType","PROCTORED","attempt_id","ExamStatus","CREATED","DOWNLOAD_SOFTWARE_CLICKED","READY_TO_START","READY_TO_SUBMIT","SUBMITTED","TIMED","SECOND_REVIEW_REQUIRED","VERIFIED","REJECTED","ERROR","STARTED","propTypes","PropTypes","element","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DownloadSoftwareProctoredExamInstructions,\n  ReadyToStartProctoredExamInstructions,\n  PrerequisitesProctoredExamInstructions,\n  SkipProctoredExamInstruction,\n  OnboardingErrorProctoredExamInstructions,\n} from './proctored_exam';\nimport { isEmpty, shouldRenderExpiredPage } from '../helpers';\nimport {\n  ExamStatus,\n  ExamType,\n  IS_ONBOARDING_ERROR,\n} from '../constants';\nimport ExamStateContext from '../context';\nimport EntranceExamInstructions from './EntranceInstructions';\nimport SubmitExamInstructions from './SubmitInstructions';\nimport RejectedInstructions from './RejectedInstructions';\nimport ErrorExamInstructions from './ErrorInstructions';\nimport SubmittedExamInstructions from './SubmittedInstructions';\nimport VerifiedExamInstructions from './VerifiedInstructions';\nimport ExpiredInstructions from './ExpiredInstructions';\nimport UnknownAttemptStatusError from './UnknownAttemptStatusError';\n\nconst Instructions = ({ children }) => {\n  const state = useContext(ExamStateContext);\n  const { exam } = state;\n  const {\n    attempt,\n    type: examType,\n    prerequisite_status: prerequisitesData,\n    passed_due_date: passedDueDate,\n    hide_after_due: hideAfterDue,\n  } = exam || {};\n  const prerequisitesPassed = prerequisitesData ? prerequisitesData.are_prerequisites_satisifed : true;\n  const {\n    attempt_status: attemptStatus,\n    attempt_ready_to_resume: attemptReadyToResume,\n  } = attempt || {};\n  const [skipProctoring, toggleSkipProctoring] = useState(false);\n  const toggleSkipProctoredExam = () => toggleSkipProctoring(!skipProctoring);\n  const expired = shouldRenderExpiredPage(exam);\n\n  if (expired) {\n    return <ExpiredInstructions />;\n  }\n\n  const renderEmptyAttemptInstructions = () => {\n    let component = <EntranceExamInstructions examType={examType} skipProctoredExam={toggleSkipProctoredExam} />;\n    if (examType === ExamType.PROCTORED && !prerequisitesPassed) {\n      component = <PrerequisitesProctoredExamInstructions skipProctoredExam={toggleSkipProctoredExam} />;\n    }\n    return component;\n  };\n\n  switch (true) {\n    case examType === ExamType.PROCTORED && skipProctoring:\n      return <SkipProctoredExamInstruction cancelSkipProctoredExam={toggleSkipProctoredExam} />;\n    case isEmpty(attempt) || !attempt.attempt_id:\n      return renderEmptyAttemptInstructions();\n    case attemptReadyToResume:\n      return <EntranceExamInstructions examType={examType} skipProctoredExam={toggleSkipProctoredExam} />;\n    case attemptStatus === ExamStatus.CREATED:\n      return <DownloadSoftwareProctoredExamInstructions skipProctoredExam={toggleSkipProctoredExam} />;\n    case attemptStatus === ExamStatus.DOWNLOAD_SOFTWARE_CLICKED:\n      return <DownloadSoftwareProctoredExamInstructions />;\n    case attemptStatus === ExamStatus.READY_TO_START:\n      return <ReadyToStartProctoredExamInstructions />;\n    case attemptStatus === ExamStatus.READY_TO_SUBMIT:\n      return <SubmitExamInstructions />;\n    case attemptStatus === ExamStatus.SUBMITTED:\n      // don't show submitted page for timed exam if exam has passed due date\n      // and in studio visibility option is set to 'show entire section'\n      // instead show exam content\n      if (examType === ExamType.TIMED && passedDueDate && !hideAfterDue) {\n        return children;\n      }\n      return <SubmittedExamInstructions examType={examType} />;\n    case attemptStatus === ExamStatus.SECOND_REVIEW_REQUIRED:\n      return <SubmittedExamInstructions examType={examType} />;\n    case attemptStatus === ExamStatus.VERIFIED:\n      return <VerifiedExamInstructions examType={examType} />;\n    case attemptStatus === ExamStatus.REJECTED:\n      return <RejectedInstructions examType={examType} />;\n    case attemptStatus === ExamStatus.ERROR:\n      return <ErrorExamInstructions examType={examType} />;\n    case examType === ExamType.PROCTORED && IS_ONBOARDING_ERROR(attemptStatus):\n      return <OnboardingErrorProctoredExamInstructions />;\n    case attemptStatus === ExamStatus.STARTED:\n      return children;\n    default:\n      return <UnknownAttemptStatusError />;\n  }\n};\n\nInstructions.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default Instructions;\n"],"file":"index.js"}