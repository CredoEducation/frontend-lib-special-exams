{"version":3,"sources":["../../src/exam/ExamWrapper.jsx"],"names":["ExamWrapper","children","props","state","ExamStateContext","AppContext","authenticatedUser","sequence","courseId","isStaff","originalUserIsStaff","canAccessProctoredExams","getExamAttemptsData","getAllowProctoringOptOut","loadInitialData","id","allowProctoringOptOut","isGated","gatedContent","undefined","gated","isTimeLimited","propTypes","PropTypes","shape","string","isRequired","bool","element","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAA4B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAZC,KAAY;;AAC9C,MAAMC,KAAK,GAAG,uBAAWC,iBAAX,CAAd;;AACA,oBAA8B,uBAAWC,kBAAX,CAA9B;AAAA,MAAQC,iBAAR,eAAQA,iBAAR;;AACA,MACEC,QADF,GAMIL,KANJ,CACEK,QADF;AAAA,MAEEC,QAFF,GAMIN,KANJ,CAEEM,QAFF;AAAA,MAGEC,OAHF,GAMIP,KANJ,CAGEO,OAHF;AAAA,MAIEC,mBAJF,GAMIR,KANJ,CAIEQ,mBAJF;AAAA,MAKEC,uBALF,GAMIT,KANJ,CAKES,uBALF;AAOA,MAAQC,mBAAR,GAA0DT,KAA1D,CAAQS,mBAAR;AAAA,MAA6BC,wBAA7B,GAA0DV,KAA1D,CAA6BU,wBAA7B;;AACA,MAAMC,eAAe;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAChBF,mBAAmB,CAACJ,QAAD,EAAWD,QAAQ,CAACQ,EAApB,CADH;;AAAA;AAAA;AAAA,qBAEhBF,wBAAwB,CAACN,QAAQ,CAACS,qBAAV,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfF,eAAe;AAAA;AAAA;AAAA,KAArB;;AAKA,MAAMG,OAAO,GAAGV,QAAQ,IAAIA,QAAQ,CAACW,YAAT,KAA0BC,SAAtC,IAAmDZ,QAAQ,CAACW,YAAT,CAAsBE,KAAzF,CAhB8C,CAkB9C;AACA;AACA;;AACA,MAAI,CAACd,iBAAD,IAAsBG,OAA1B,EAAmC;AACjC,WAAOR,QAAP;AACD;;AAED,wBAAU,YAAM;AACda,IAAAA,eAAe;AAChB,GAFD,EAEG,EAFH;AAIA,sBACE,6BAAC,aAAD;AACE,IAAA,OAAO,EAAEG,OADX;AAEE,IAAA,aAAa,EAAEV,QAAQ,CAACc,aAF1B;AAGE,IAAA,mBAAmB,EAAEX,mBAHvB;AAIE,IAAA,uBAAuB,EAAEC;AAJ3B,KAMGV,QANH,CADF;AAUD,CAvCD;;AAyCAD,WAAW,CAACsB,SAAZ,GAAwB;AACtBf,EAAAA,QAAQ,EAAEgB,mBAAUC,KAAV,CAAgB;AACxBT,IAAAA,EAAE,EAAEQ,mBAAUE,MAAV,CAAiBC,UADG;AAExBL,IAAAA,aAAa,EAAEE,mBAAUI,IAFD;AAGxBX,IAAAA,qBAAqB,EAAEO,mBAAUI,IAHT;AAIxBT,IAAAA,YAAY,EAAEK,mBAAUC,KAAV,CAAgB;AAC5BJ,MAAAA,KAAK,EAAEG,mBAAUI;AADW,KAAhB;AAJU,GAAhB,EAOPD,UARmB;AAStBlB,EAAAA,QAAQ,EAAEe,mBAAUE,MAAV,CAAiBC,UATL;AAUtBzB,EAAAA,QAAQ,EAAEsB,mBAAUK,OAAV,CAAkBF,UAVN;AAWtBjB,EAAAA,OAAO,EAAEc,mBAAUI,IAXG;AAYtBjB,EAAAA,mBAAmB,EAAEa,mBAAUI,IAZT;AAatBhB,EAAAA,uBAAuB,EAAEY,mBAAUI;AAbb,CAAxB;AAgBA3B,WAAW,CAAC6B,YAAZ,GAA2B;AACzBpB,EAAAA,OAAO,EAAE,KADgB;AAEzBC,EAAAA,mBAAmB,EAAE,KAFI;AAGzBC,EAAAA,uBAAuB,EAAE;AAHA,CAA3B;eAMeX,W","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { AppContext } from '@edx/frontend-platform/react';\nimport PropTypes from 'prop-types';\nimport Exam from './Exam';\nimport ExamStateContext from '../context';\n\n/**\n * Exam wrapper is responsible for triggering initial exam data fetching and rendering Exam.\n */\nconst ExamWrapper = ({ children, ...props }) => {\n  const state = useContext(ExamStateContext);\n  const { authenticatedUser } = useContext(AppContext);\n  const {\n    sequence,\n    courseId,\n    isStaff,\n    originalUserIsStaff,\n    canAccessProctoredExams,\n  } = props;\n  const { getExamAttemptsData, getAllowProctoringOptOut } = state;\n  const loadInitialData = async () => {\n    await getExamAttemptsData(courseId, sequence.id);\n    await getAllowProctoringOptOut(sequence.allowProctoringOptOut);\n  };\n\n  const isGated = sequence && sequence.gatedContent !== undefined && sequence.gatedContent.gated;\n\n  // if the user is browsing public content (not logged in) they cannot be in an exam\n  // if the user is staff they may view exam content without an exam attempt\n  // any requests for exam state will 403 so just short circuit this component here\n  if (!authenticatedUser || isStaff) {\n    return children;\n  }\n\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n\n  return (\n    <Exam\n      isGated={isGated}\n      isTimeLimited={sequence.isTimeLimited}\n      originalUserIsStaff={originalUserIsStaff}\n      canAccessProctoredExams={canAccessProctoredExams}\n    >\n      {children}\n    </Exam>\n  );\n};\n\nExamWrapper.propTypes = {\n  sequence: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    isTimeLimited: PropTypes.bool,\n    allowProctoringOptOut: PropTypes.bool,\n    gatedContent: PropTypes.shape({\n      gated: PropTypes.bool,\n    }),\n  }).isRequired,\n  courseId: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n  isStaff: PropTypes.bool,\n  originalUserIsStaff: PropTypes.bool,\n  canAccessProctoredExams: PropTypes.bool,\n};\n\nExamWrapper.defaultProps = {\n  isStaff: false,\n  originalUserIsStaff: false,\n  canAccessProctoredExams: true,\n};\n\nexport default ExamWrapper;\n"],"file":"ExamWrapper.js"}