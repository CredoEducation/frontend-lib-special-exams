{"version":3,"sources":["../../src/exam/Exam.jsx"],"names":["Exam","isGated","isTimeLimited","originalUserIsStaff","canAccessProctoredExams","children","intl","state","ExamStateContext","isLoading","activeAttempt","showTimer","stopExam","exam","expireExam","pollAttempt","apiErrorMsg","pingAttempt","getProctoringSettings","submitExam","attempt","examType","type","examId","id","passedDueDate","passed_due_date","hideAfterDue","hide_after_due","attemptStatus","attempt_status","shouldShowMasqueradeAlert","ExamType","TIMED","ExamStatus","STARTED","hasProctoredExamAccess","setHasProctoredExamAccess","proctoredExamTypes","ONBOARDING","PRACTICE","PROCTORED","includes","formatMessage","messages","proctoredExamAccessDenied","sequenceContent","Info","propTypes","PropTypes","bool","isRequired","element","intlShape","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Alert, Spinner } from '@edx/paragon';\nimport { Info } from '@edx/paragon/icons';\nimport { ExamTimerBlock } from '../timer';\nimport Instructions from '../instructions';\nimport ExamStateContext from '../context';\nimport ExamAPIError from './ExamAPIError';\nimport { ExamStatus, ExamType } from '../constants';\nimport messages from './messages';\n\n/**\n * Exam component is intended to render exam instructions before and after exam.\n * It is also responsible for rendering exam timer block/component during the exam.\n * If children do not relate to exam sequence, render them directly.\n * @param isTimeLimited - boolean used to identify if we need to process sequence as an exam\n * @param children - sequence content\n * @returns {JSX.Element}\n * @constructor\n */\nconst Exam = ({\n  isGated, isTimeLimited, originalUserIsStaff, canAccessProctoredExams, children, intl,\n}) => {\n  const state = useContext(ExamStateContext);\n  const {\n    isLoading, activeAttempt, showTimer, stopExam, exam,\n    expireExam, pollAttempt, apiErrorMsg, pingAttempt,\n    getProctoringSettings, submitExam,\n  } = state;\n\n  const {\n    attempt,\n    type: examType,\n    id: examId,\n    passed_due_date: passedDueDate,\n    hide_after_due: hideAfterDue,\n  } = exam || {};\n  const { attempt_status: attemptStatus } = attempt || {};\n\n  const shouldShowMasqueradeAlert = () => {\n    // if course staff is masquerading as a specific learner, they should be able\n    // to view the exam content regardless of the learner's current state\n    if (originalUserIsStaff && isTimeLimited) {\n      if (examType === ExamType.TIMED && passedDueDate && !hideAfterDue) {\n        // if the learner is able to view exam content after the due date is passed,\n        // don't show this alert\n        return false;\n      }\n      return attemptStatus !== ExamStatus.STARTED;\n    }\n    return false;\n  };\n\n  const [hasProctoredExamAccess, setHasProctoredExamAccess] = useState(true);\n\n  const proctoredExamTypes = [ExamType.ONBOARDING, ExamType.PRACTICE, ExamType.PROCTORED];\n\n  useEffect(() => {\n    if (examId) {\n      getProctoringSettings();\n    }\n    if (proctoredExamTypes.includes(examType)) {\n      // Only exclude Timed Exam when restricting access to exams\n      setHasProctoredExamAccess(canAccessProctoredExams);\n    }\n    // this makes sure useEffect gets called only one time after the exam has been fetched\n    // we can't leave this empty since initially exam is just an empty object, so\n    // API calls above would not get triggered\n  }, [examId]);\n\n  if (isLoading) {\n    return (\n      <div data-testid=\"spinner\" className=\"d-flex justify-content-center align-items-center flex-column my-5 py-5\">\n        <Spinner animation=\"border\" variant=\"primary\" />\n      </div>\n    );\n  }\n\n  if (!hasProctoredExamAccess) {\n    // If the user cannot acces proctoring exam, and the current exam is a proctoring exam,\n    // we want to display a message box to let learner know they have no access.\n    return (\n      <div data-testid=\"no-access\" className=\"d-flex justify-content-center align-items-center flex-column\">\n        {intl.formatMessage(messages.proctoredExamAccessDenied)}\n      </div>\n    );\n  }\n\n  const sequenceContent = <>{children}</>;\n\n  return (\n    <div className=\"d-flex flex-column justify-content-center\">\n      {shouldShowMasqueradeAlert() && (\n        <Alert variant=\"info\" icon={Info} data-testid=\"masquerade-alert\">\n          <FormattedMessage\n            id=\"exam.hiddenContent\"\n            defaultMessage=\"This exam is hidden from the learner.\"\n          />\n        </Alert>\n      )}\n      {showTimer && (\n        <ExamTimerBlock\n          attempt={activeAttempt}\n          stopExamAttempt={stopExam}\n          submitExam={submitExam}\n          expireExamAttempt={expireExam}\n          pollExamAttempt={pollAttempt}\n          pingAttempt={pingAttempt}\n        />\n      )}\n      { // show the error message only if you are in the exam sequence\n        isTimeLimited && apiErrorMsg && <ExamAPIError />\n      }\n      {isTimeLimited && !originalUserIsStaff && !isGated\n        ? <Instructions>{sequenceContent}</Instructions>\n        : sequenceContent}\n    </div>\n  );\n};\n\nExam.propTypes = {\n  isTimeLimited: PropTypes.bool.isRequired,\n  isGated: PropTypes.bool.isRequired,\n  originalUserIsStaff: PropTypes.bool.isRequired,\n  canAccessProctoredExams: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  intl: intlShape.isRequired,\n};\n\nExam.defaultProps = {\n  canAccessProctoredExams: true,\n};\n\nexport default injectIntl(Exam);\n"],"file":"Exam.js"}